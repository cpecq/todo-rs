use chrono::prelude::*;
use std::error::Error;
use structopt::StructOpt;

#[derive(Debug, StructOpt)]
#[structopt(
    name = "todo-rs",
    about = "a simple todo app to set timers and switch tasks"
)]
enum Args {
    /// Add a new task to the task list!
    Add {
        /// Specify the time in hours that the task is estimated to take. Default is one hour.
        #[structopt(default_value = "1")]
        duration: f32,

        /// Name of the task needed to complete.
        #[structopt(short, long)]
        name: String,

        /// Description of the task being completed.
        #[structopt(short, long)]
        description: String,

        /// A due-date if the task is an ongoing task, fmt "15-01-2021"
        #[structopt(name = "<Due Date>", default_value)]
        due_date: String,
    },

    /// Get the status of a targetted or all tasks.
    Status {
        /// Returns the status of a targetted task.
        #[structopt(name = "Task Name")]
        name: String,

        /// Returns the status of all ongoing tasks.
        #[structopt(short, long)]
        all: bool,
    },

    /// Remove all or targetted todo tasks
    Remove {
        /// Remove a specific taks from the todo list.
        #[structopt(name = "Task Name")]
        name: String,

        /// Remove all tasks from the todo list: do you really want to delete everything?
        #[structopt(short, long)]
        all: bool,
    },
}

#[derive(Debug)]
struct Task {
    name: String,
    description: String,
    duration: f32,
    due_date: String,
}

impl Task {
    fn new(name: String, description: String, duration: f32) -> Result<Task, Box<dyn Error>> {
        let task = Task {
            name: name,
            description: description,
            duration: duration,
            due_date: Local::today().to_string(),
        };

        Ok(task)
    }
}

fn main() {
    let opts = Args::from_args();
    println!("{:?}", opts);
    match opts {
        Add => {
            println!("add was used");
            Task::new(opts.Add.name, opts.description, Args::Add::duration);
        }
        Status => println!("status was used"),
        Remove => println!("remove was used"),
        _ => eprintln!("footsies"),
    }
}
